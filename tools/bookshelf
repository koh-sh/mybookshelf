#!/usr/bin/env python3
import csv
import argparse
from typing import List, Dict

class BookshelfManager:
    def __init__(self, csv_file='data/books.csv'):
        self.csv_file = csv_file
        
    def load_books(self) -> List[Dict]:
        """CSVから本のデータを読み込み"""
        try:
            with open(self.csv_file, 'r', encoding='utf-8') as f:
                return list(csv.DictReader(f))
        except FileNotFoundError:
            return []
    
    def save_books(self, books: List[Dict]):
        """本のデータをCSVに保存"""
        if not books:
            return
        
        fieldnames = ['NAME', 'CATEGORY', 'LANG', 'TYPE', 'STATUS', 'MEMO']
        with open(self.csv_file, 'w', newline='', encoding='utf-8') as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames)
            writer.writeheader()
            writer.writerows(books)
    
    def add_book(self, name: str, category: str = "", lang: str = "JPN", 
                 book_type: str = "Kindle", status: str = "UNREAD", memo: str = ""):
        """本を追加"""
        books = self.load_books()
        
        # 重複チェック
        if any(book['NAME'] == name for book in books):
            print(f"エラー: '{name}' は既に登録されています")
            return False
        
        new_book = {
            'NAME': name,
            'CATEGORY': category,
            'LANG': lang,
            'TYPE': book_type,
            'STATUS': status,
            'MEMO': memo
        }
        
        books.append(new_book)
        self.save_books(books)
        print(f"追加しました: {name}")
        return True
    
    def update_status(self, name_part: str, new_status: str):
        """本のステータスを更新"""
        books = self.load_books()
        matches = [book for book in books if name_part.lower() in book['NAME'].lower()]
        
        if not matches:
            print(f"エラー: '{name_part}' を含む本が見つかりません")
            return False
        
        if len(matches) > 1:
            print(f"複数の本が見つかりました:")
            for i, book in enumerate(matches):
                print(f"  {i+1}. {book['NAME']}")
            return False
        
        matches[0]['STATUS'] = new_status
        self.save_books(books)
        print(f"更新しました: {matches[0]['NAME']} → {new_status}")
        return True
    

def main():
    parser = argparse.ArgumentParser(description='Bookshelf CLI Tool')
    subparsers = parser.add_subparsers(dest='command', help='利用可能なコマンド')
    
    # add コマンド
    add_parser = subparsers.add_parser('add', help='本を追加')
    add_parser.add_argument('name', help='本のタイトル')
    add_parser.add_argument('--category', default='', help='カテゴリ')
    add_parser.add_argument('--lang', default='JPN', help='言語')
    add_parser.add_argument('--type', default='Kindle', help='本の種類')
    
    # start コマンド
    start_parser = subparsers.add_parser('start', help='読み始める (UNREAD → READING)')
    start_parser.add_argument('name', help='本のタイトル（部分一致）')
    
    # finish コマンド
    finish_parser = subparsers.add_parser('finish', help='読み終える (READING → READ)')
    finish_parser.add_argument('name', help='本のタイトル（部分一致）')
    
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    manager = BookshelfManager()
    
    if args.command == 'add':
        manager.add_book(args.name, args.category, args.lang, args.type)
    elif args.command == 'start':
        manager.update_status(args.name, 'READING')
    elif args.command == 'finish':
        manager.update_status(args.name, 'READ')

if __name__ == "__main__":
    main()